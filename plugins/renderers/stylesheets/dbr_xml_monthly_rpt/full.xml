<xsl:template match="member">
<h3><xsl:value-of select="@name"/></h3>
<table>
<tr><th>Primary task:</th><td><xsl:value-of select="@task1"/>
</td></tr>
<tr><th>Update:</th><td>
  <xsl:call-template name="lf2p">
    <xsl:with-param name="instr">
      <xsl:value-of select="update"/>
    </xsl:with-param>
  </xsl:call-template>
</td></tr>
</table>
</xsl:template>

<xsl:template match="update" mode="taskhistory">
  <xsl:param name="current"/>
  <xsl:value-of select="dummy"/> <!-- work around amara bug! -->
  <tr><td>
      <xsl:choose><xsl:when test="$current='true'">
	  <b><xsl:value-of select="substring(string(.),1,8)"/></b>
	</xsl:when><xsl:otherwise>
	  <xsl:value-of select="substring(string(.),1,8)"/>
      </xsl:otherwise></xsl:choose>
      <xsl:value-of select="substring-after(string(.),substring(string(.),1,8))"/>
  </td></tr>
</xsl:template>

<xsl:template match="task" mode="taskhistory">
  <xsl:param name="current"/>
  <xsl:value-of select="dummy"/> <!-- work around amara bug! -->
  <xsl:variable name="taskname" select="@name"/>
  <!-- construct docname with xsl:variable because amara concat() is broken -->
  <xsl:variable name="docname">monthlyrpt_<xsl:value-of select="/statusreport/@previousreportmonth"/>.xml</xsl:variable>

  <xsl:choose><xsl:when test="string-length(/statusreport/@previousreportmonth) > 0">
      <xsl:apply-templates select="document($docname)/statusreport/taskupdates/task[@name=$taskname]" mode="taskhistory"/>
  </xsl:when></xsl:choose>
  <xsl:apply-templates mode="taskhistory">
    <xsl:with-param name="current" select="$current"/>
  </xsl:apply-templates>
</xsl:template>      


<xsl:template match="task" mode="counttaskhistory">
  <xsl:variable name="taskname" select="@name"/>
  <xsl:variable name="prevcount">
  <!-- construct docname with xsl:variable because amara concat() is broken -->
  <xsl:variable name="docname">monthlyrpt_<xsl:value-of select="/statusreport/@previousreportmonth"/>.xml</xsl:variable>
    <xsl:choose><xsl:when test="string-length(/statusreport/@previousreportmonth) > 2">
	<xsl:apply-templates select="document($docname)/statusreport/taskupdates/task[@name=$taskname]" mode="counttaskhistory"/> <!--string(/statusreport/@previousreportmonth), --> 
    </xsl:when><xsl:otherwise>
	0
    </xsl:otherwise></xsl:choose>
  </xsl:variable>

  <xsl:choose>
    <xsl:when test="count(update) > 0">
      <xsl:value-of select="number($prevcount)+1"/>
    </xsl:when><xsl:otherwise>
      <xsl:value-of select="$prevcount"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>      



<xsl:template match="task">
  <xsl:variable name="updatecount">
    <xsl:apply-templates select="." mode="counttaskhistory"/>
  </xsl:variable>
  <xsl:choose><xsl:when test="number($updatecount) > 0">
      <tr><th style="text-align: left;">Task <xsl:value-of select="@name"/></th></tr> 
      <xsl:apply-templates select="." mode="taskhistory">
	<xsl:with-param name="current">true</xsl:with-param>
      </xsl:apply-templates>
  </xsl:when></xsl:choose>
</xsl:template>
    
<xsl:template match="update">

</xsl:template>

<xsl:template match="taskupdates">
<h2>Task updates</h2>
<table> 
  <xsl:apply-templates/>
</table>
</xsl:template>


<xsl:template match="memberreports">
<h2>Individual team member reports</h2>
<xsl:apply-templates/>
</xsl:template>

<!-- begin overall template -->
<xsl:template match="statusreport" mode="full">
<h1>Monthly technical progress for <xsl:call-template name="month2text"><xsl:with-param name="month"><xsl:value-of select="/statusreport/@month"/></xsl:with-param></xsl:call-template></h1>
<xsl:apply-templates/>
</xsl:template>

<xsl:template match="discussion">
<h2>Notes and Discussion</h2>
  <xsl:call-template name="lf2p">
    <xsl:with-param name="instr">
      <xsl:value-of select="."/>
    </xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template name="month2text">
  <xsl:param name="month"/>
  <xsl:variable name="year"><xsl:value-of select="substring-before($month,'-')"/></xsl:variable>
  <xsl:variable name="monum"><xsl:value-of select="substring-after($month,'-')"/></xsl:variable>
  <xsl:choose><xsl:when test="number($monum)=1">
      January
    </xsl:when><xsl:when test="number($monum)=2">
      February
    </xsl:when><xsl:when test="number($monum)=3">
      March
    </xsl:when><xsl:when test="number($monum)=4">
      April
    </xsl:when><xsl:when test="number($monum)=5">
      May
    </xsl:when><xsl:when test="number($monum)=6">
      June
    </xsl:when><xsl:when test="number($monum)=7">
      July
    </xsl:when><xsl:when test="number($monum)=8">
      August
    </xsl:when><xsl:when test="number($monum)=9">
      September
    </xsl:when><xsl:when test="number($monum)=10">
      October
    </xsl:when><xsl:when test="number($monum)=11">
      November
    </xsl:when><xsl:when test="number($monum)=12">
      December
  </xsl:when></xsl:choose>
  <xsl:value-of select="$year"/>
</xsl:template>

<xsl:template name="calccumulative">
<xsl:param name="month"/>
<xsl:variable name="reportdoc">monthlyrpt_<xsl:value-of select="$month"/>.xml</xsl:variable>
<xsl:variable name="previousreportmonth"><xsl:value-of select="document($reportdoc)/statusreport/@previousreportmonth"/></xsl:variable>
<xsl:variable name="prevcumulative">
  <xsl:choose><xsl:when test="string-length($previousreportmonth) &gt; 0">
      <xsl:call-template name="calccumulative">
	<xsl:with-param name="month">
	  <xsl:value-of select="$previousreportmonth"/>
	</xsl:with-param>
      </xsl:call-template>
    </xsl:when><xsl:otherwise>
      0
  </xsl:otherwise></xsl:choose>
</xsl:variable>
<xsl:value-of select="number($prevcumulative)+number(document($reportdoc)/statusreport/financial/charged)"/>
</xsl:template>

<xsl:template match="financial">
<xsl:variable name="lastmonthadjust">
  <xsl:choose><xsl:when test="string-length(/statusreport/@previousreportmonth) &gt; 0">
      <xsl:value-of select="document(concat('monthlyrpt_',string(/statusreport/@previousreportmonth),'.xml'))/statusreport/financial/adjust"/>
    </xsl:when><xsl:otherwise>
      0
  </xsl:otherwise></xsl:choose>
</xsl:variable>
<xsl:variable name="pastcumulative">
  <xsl:choose><xsl:when test="string-length(/@previousreportmonth) &gt; 0">
      <xsl:call-template name="calccumulative">
	<xsl:with-param name="month">
	  <xsl:value-of select="/@previousreportmonth"/>
	</xsl:with-param>
      </xsl:call-template>
    </xsl:when><xsl:otherwise>
      0
  </xsl:otherwise></xsl:choose>
</xsl:variable>
<h2>Financial update</h2>
  <table>
    <tr><td>Planned expenditures for <xsl:call-template name="month2text"><xsl:with-param name="month"><xsl:value-of select="/statusreport/@month"/></xsl:with-param></xsl:call-template>:</td><td></td><td>$<xsl:value-of select="planned"/></td></tr>
    <tr><td>Amount charged (should match invoice): </td><td></td><td>$<xsl:value-of select="spend"/></td></tr>
    <tr><td>Subtract previous month adjustment: </td><td>-</td><td>$<xsl:value-of select="$lastmonthadjust"/></td></tr>
    <tr><td>Adjustment for major spending not charged by cutoff: </td><td>+</td><td>$<xsl:value-of select="adjust"/></td></tr>
    <tr><td>Estimated total: (should approximately match planned value, above)</td><td>=</td><td>$<xsl:value-of select="number(spend)-number($lastmonthadjust)+number(adjust)"/></td></tr>
    <tr><td>Estimated cumulative total: </td><td></td><td>$<xsl:value-of select="number(spend)+number(adjust)+number($pastcumulative)"/></td></tr>
    

  </table>
  
  <h4>Spending notes:</h4>
  <xsl:choose><xsl:when test="string-length(update) &gt; 0">
      <xsl:call-template name="lf2p">
	<xsl:with-param name="instr">
	  <xsl:value-of select="update"/>
	</xsl:with-param>
      </xsl:call-template>
    </xsl:when><xsl:otherwise>
      (none)
  </xsl:otherwise></xsl:choose>
</xsl:template>


<xsl:template name="lf2p"> <!-- Convert linefeeds to <p> </p> -->
<xsl:param name="instr"/>
<xsl:choose>
<xsl:when test="contains($instr,'&#x0a;')">
<p>
<xsl:value-of select="substring-before($instr,'&#x0a;')"/>
</p>
<xsl:call-template name="lf2p">
<xsl:with-param name="instr">
<xsl:value-of select="substring-after($instr,'&#x0a;')"/>
</xsl:with-param>
</xsl:call-template>
</xsl:when>
<xsl:otherwise>
<p>
<xsl:value-of select="$instr"/>
</p>
</xsl:otherwise>
</xsl:choose>
</xsl:template> 