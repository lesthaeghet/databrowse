<?xml version="1.0" encoding="UTF-8"?>

<!-- The output of this stylesheet can be tested with the xsltproc
command: xsltproc ag_web.xml index.xml 

You can provide a parmeter 'extcvt' which if 'true' will cause anchor tags 
with extcvt="true" to have a .xml extension transfomed to .html

-->


<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" doctype-public="-//W3C//DTD HTML 4.01//EN" doctype-system="http://www.w3.org/TR/html4/strict.dtd"/>
<!-- <xsl:output method="html"/> -->


<!-- xsl:variable name="ensp" select="'&#x2009;'" --> <!-- en space -->
<!-- xsl:variable name="emsp" select="'&#x2003;'" --> <!-- em space -->
<!-- xsl:variable name="thinsp" select="'&#x2009;'" --> <!-- thin space -->

<xsl:variable name="title">
<xsl:choose>
<xsl:when test="not(body/@navname)"><xsl:value-of select="body/h1"/></xsl:when>
<xsl:otherwise><xsl:value-of select="body/@navname"/></xsl:otherwise>
</xsl:choose>
</xsl:variable>

<xsl:variable name="resdir">
<xsl:choose>
<xsl:when test="string-length(body/@resdir) = 0">http://localhost/dbres/</xsl:when>
<xsl:otherwise><xsl:value-of select="body/@resdir"/></xsl:otherwise>
</xsl:choose>
</xsl:variable>
 
<xsl:variable name="horizbarisfirst">true</xsl:variable>

<xsl:param name="extcvt" select="'false'"/> 


<!-- begin overall template -->
<xsl:template match="/">

<html lang="en">
<head>
	<meta charset="utf-8"/>
	<title><xsl:value-of select="document('style.xml')/agwebstyle/titleprefix"/> <xsl:value-of select="$title"/></title>
	<xsl:apply-templates select="body/meta" mode="head"/>
	<xsl:apply-templates select="body/link" mode="head"/>
	<xsl:apply-templates select="document('style.xml')/agwebstyle/cssstyle" mode="head"/>
	<xsl:apply-templates select="body/style" mode="head"/>

	<xsl:element name="link">
          <xsl:attribute name="href"><xsl:value-of select="$resdir"/>base.css?1.1</xsl:attribute>
	  <xsl:attribute name="media">all</xsl:attribute>
	  <xsl:attribute name="rel">stylesheet</xsl:attribute>
        </xsl:element>
	<xsl:element name="link">
          <xsl:attribute name="href"><xsl:value-of select="$resdir"/>sample.css?1.1</xsl:attribute>
	  <xsl:attribute name="media">all</xsl:attribute>
	  <xsl:attribute name="rel">stylesheet</xsl:attribute>
        </xsl:element>
	<!--[if lt IE 9]>
		<style>
			ul.left > li, ul.right > li{
				*display: inline;
			}
			#ribbon form > input[type="submit"]{
				*vertical-align: baseline;
			}
		</style>
	<![endif]--> 
</head>
<body>
	<div class="skip"><a accesskey="2" href="#container">Skip Navigation</a></div>
	<div class="hwrapper" id="header">
		<div id="top-strip">
			<div class="grids-24">
				<div class="grid-8">
					  <xsl:copy-of select="document('style.xml')/agwebstyle/topbar/*"/>
				</div>
				<div class="grid-16">
					  <xsl:copy-of select="document('style.xml')/agwebstyle/topbarright/*"/>
				</div>
			</div>
		</div>
		<div id="ribbon">
			<div class="grids-24">
				<div class="grid-16">
					<h1 class="nameplate">
						<a accesskey="1" href="http://www.iastate.edu/">

						  <xsl:element name="img">
						    <xsl:attribute name="alt">Iowa State University</xsl:attribute>
						    <xsl:attribute name="src"><xsl:value-of select="$resdir"/>sprite.png</xsl:attribute>
						  </xsl:element>
						</a>
					</h1>
				</div>
				<div class="grid-8">
					<form action="http://google.iastate.edu/search" method="GET">
						<input name="output" type="hidden" value="xml_no_dtd"/>
						<input name="client" type="hidden" value="default_frontend"/>
						<input name="sitesearch" type="hidden" value=""/>
						<input name="proxystylesheet" type="hidden" value="default_frontend"/>
						<input accesskey="s" name="q" placeholder="Search" tabindex="1" type="text"/>
						<input name="btnG" title="Search" type="submit" value=""/>
					</form>
				</div>
			</div>
			<div class="grids-24">
				<div class="grid-12">
					<h2 class="site-title"><xsl:copy-of select="document('style.xml')/agwebstyle/sitetitle/*"/></h2>
				</div>
				<div class="grid-12">
					
				</div>
			</div>
		</div>
	</div>
	<div id="container">
		
		<div class="grids-24">
			<div class="grid-5 sidebar" id="left-sidebar"><ul class="navigation">
<xsl:apply-templates select="document('navbar.xml')/navbar" mode="vert"/> <xsl:apply-templates select="document('style.xml')/agwebstyle/navbarfoot/*" mode="html"/>
</ul></div>
			<div class="grid-19" id="content">
				<div class="header gutter">
	<xsl:apply-templates/>

</div>
			</div>
			
			<div class="clear"></div>
		</div>
	</div>
	<div class="fwrapper grids-24">
		<div class="grids-24" id="footer">
			<div class="grid-3 first">
				<a class="nameplate" href="/">
						  <xsl:element name="img">
						    <xsl:attribute name="alt">Iowa State University</xsl:attribute>
						    <xsl:attribute name="src"><xsl:value-of select="$resdir"/>sprite.png</xsl:attribute>
						  </xsl:element>
				</a>
			</div>
			<div class="grid-21 last">
			        <xsl:copy-of select="document('style.xml')/agwebstyle/footer/*"/>
			</div>
		</div>
	</div>
	
</body>
</html>

</xsl:template>
<!-- end overall template -->

<xsl:template match="a" mode="anchors">
<!-- stuff $resdir into all the HREF links -->
<xsl:element name="{name()}">
<xsl:attribute name="class">navbaranchor</xsl:attribute> <!-- set all navigation bar anchors to have a CSS style of "navbaranchor" -->
<xsl:for-each select="@*">
<xsl:choose>
  <xsl:when test="name()='href'"> <!-- identify HREF -->
  <xsl:attribute name="{name()}"> 
  <xsl:choose>  
    <xsl:when test="not(starts-with(.,'/')) and not(contains(.,'://'))"> 
      <!-- relative path. Should be relative to $resdir -->
      <xsl:value-of select="$resdir"/>/<!-- replace .xml with .html if appropriate -->
    </xsl:when>
  </xsl:choose>
  <xsl:choose>
    <xsl:when test="'.xml'=substring(.,string-length(.)-3) and ../@extcvt='true' and $extcvt='true' and $extcvt='true'">  <!-- this is really ends-with(.,'.xml') but that function doesn't exist in xsl-1.0 -->
      <xsl:value-of select="substring(.,1,string-length(.)-4)"/>.html</xsl:when>
    <xsl:otherwise> 
      <xsl:value-of select="."/>
    </xsl:otherwise>
  </xsl:choose>

  </xsl:attribute>
  </xsl:when>
  <xsl:when test="name()='extcvt'"></xsl:when> <!-- discard extcvt parameter -->
  <xsl:otherwise>
    <xsl:attribute name="{name()}"><xsl:value-of select="."/></xsl:attribute>
  </xsl:otherwise>
</xsl:choose>
</xsl:for-each>
<xsl:value-of select="."/>
</xsl:element>
</xsl:template>

<xsl:template match="a" mode="noanchors">
<xsl:value-of select="."/>
</xsl:template>

<xsl:template match="a" mode="subtreenoanchors">
<!-- <xsl:value-of select="."/> -->
<xsl:apply-templates select="." mode="anchors"/>
</xsl:template>

<xsl:template match="a" mode="subtreeanchors">
<xsl:apply-templates select="." mode="anchors"/>
</xsl:template>

<xsl:template match="a" mode="nosubtreeanchors">
<xsl:apply-templates select="." mode="anchors"/>
</xsl:template>


<xsl:template match="navelem" mode="subtree">
<xsl:element name="li">
<xsl:choose>
<xsl:when test="*=substring($title,string-length($title)-string-length(*)+1)"> <!-- this is really ends-with($title,*) but that function doesn't exist in xsl-1.0 . Please avoid trailing spaces in your first h1 or in your navelem, or this may not work right. -->
<xsl:attribute name="class">selected</xsl:attribute>
<xsl:apply-templates mode="subtreenoanchors"/>
</xsl:when>
<xsl:when test="contains($title,*)">
<xsl:attribute name="class">selected</xsl:attribute>
<xsl:apply-templates mode="subtreeanchors"/>
</xsl:when>
<xsl:otherwise>
<xsl:apply-templates mode="nosubtreeanchors"/>
</xsl:otherwise>
</xsl:choose>

</xsl:element> <!-- close li -->
</xsl:template>


<xsl:template match="navdir" mode="subtreenoanchors">
<ul class="vertbarsubtree">
<xsl:apply-templates mode="subtree"/>
</ul>
</xsl:template>

<xsl:template match="navdir" mode="subtreeanchors">
<ul class="vertbarsubtree">
<xsl:apply-templates mode="subtree"/>
</ul>
</xsl:template>

<xsl:template match="navdir" mode="nosubtreeanchors">
</xsl:template>

<xsl:template match="navdir" mode="nosubtreenoanchors">
</xsl:template>


<!-- Begin vertical navigation bar -->
<xsl:template match="navelem" mode="vert">
<xsl:element name="li">
<!--  For this to work, the name of the navelem and the first h1 title 
of the xml file must match exactly. -->
<xsl:choose>
<xsl:when test="*=substring($title,string-length($title)-string-length(*)+1)"> <!-- this is really ends-with($title,*) but that function doesn't exist in xsl-1.0. Please avoid trailing spaces in your first h1 or in your navelem, or this may not work right. -->
<xsl:attribute name="class">selected</xsl:attribute>
<xsl:apply-templates mode="subtreenoanchors"/>
</xsl:when>
<xsl:when test="contains($title,*)">
<xsl:attribute name="class">selected</xsl:attribute>
<xsl:apply-templates mode="subtreeanchors"/>
</xsl:when>
<xsl:when test="navdir/@alwaysopen='true'">
<xsl:apply-templates mode="subtreeanchors"/>
</xsl:when>
<xsl:otherwise>
<xsl:apply-templates mode="nosubtreeanchors"/>
</xsl:otherwise>
</xsl:choose>
</xsl:element>  <!-- close li -->
</xsl:template>

<xsl:template match="navbar" mode="vert">
<xsl:apply-templates mode="vert"/>
</xsl:template>

<!-- End vertical navigation bar -->


<!-- Begin horizontal navigation bar -->
<xsl:template match="navelem" mode="horiz">
<!-- xsl:value-of select="position()"/-->
<!-- print a preceding vertical bar except for the first entry -->
<xsl:choose>
  <xsl:when test="position()=2">
  </xsl:when>
  <xsl:otherwise>
    <!-- <xsl:text disable-output-escaping="yes">&amp;emsp;</xsl:text> -->
    <!-- IE6 doesn't support &emsp; ... use this <span> as an alternative -->
    <span style="margin-left: 1em"> </span>
  </xsl:otherwise>
</xsl:choose>
<!--  Remove anchor of the currently selected element  -->
<!--  For this to work, the name of the navelem and the first h1 title 
of the xml file must match exactly. -->
<xsl:choose>
<xsl:when test="*=$title">
<xsl:apply-templates mode="nosubtreenoanchors"/>
</xsl:when>
<xsl:otherwise>
<xsl:apply-templates mode="nosubtreeanchors"/>
</xsl:otherwise>
</xsl:choose> 
<!-- xsl:text disable-output-escaping="yes" &amp;nbsp; /xsl:text -->
</xsl:template>
 
<xsl:template match="navbar" mode="horiz">
<xsl:apply-templates mode="horiz" />
</xsl:template>
<!-- End horizontal navigation bar -->


<!-- Begin transcription of body element -->
<xsl:template match="body">
<xsl:apply-templates mode="html"/>
</xsl:template>


<xsl:template mode="head" priority="1" match="meta">
<!-- keep contents -->
<xsl:copy-of select="."/>
</xsl:template>

<xsl:template mode="head" priority="1" match="link">
<!-- keep contents -->
<xsl:copy-of select="."/>
</xsl:template>

<xsl:template mode="head" priority="1" match="script">
<!-- keep contents -->
<xsl:copy-of select="."/>
</xsl:template>

<xsl:template mode="head" priority="1" match="style">
<!-- keep contents -->
<xsl:element name="{name()}">
<xsl:for-each select="@*">
    <xsl:attribute name="{name()}">
    <xsl:value-of select="."/>
    </xsl:attribute>
</xsl:for-each>
<xsl:apply-templates select="node()" mode="head"/>
</xsl:element>
</xsl:template>

<!-- need to catch $$$resdir in stylesheets! -->
<xsl:template match="text()" mode="head">
<xsl:call-template name="subresdir">
<xsl:with-param name="string" select="."/> 
</xsl:call-template>
</xsl:template>

<xsl:template name="subresdir">
<xsl:param name="string"/>
<xsl:choose>
  <xsl:when test="contains($string,'$$$resdir')">
    <xsl:value-of select="substring-before($string,'$$$resdir')"/><xsl:value-of select="$resdir"/><xsl:call-template name="subresdir"><xsl:with-param name="string" select="substring-after($string,'$$$resdir')"/></xsl:call-template>
  </xsl:when>  
  <xsl:otherwise>
    <xsl:value-of select="$string"/>
  </xsl:otherwise>
</xsl:choose>
</xsl:template> 




<!-- can adjust elements as here -->
<xsl:template match="li" mode="html">
<xsl:element name="{name()}">
<!-- could add attribute here: eg. <xsl:attribute name="size">+1</xsl:attribute>  -->
<xsl:for-each select="@*"><xsl:attribute name="{name()}"><xsl:value-of select="."/></xsl:attribute></xsl:for-each>
<!-- could put surrounding element here -->
<xsl:apply-templates mode="html"/>
<!-- end surrounding element here-->
</xsl:element>
</xsl:template>

<!-- extcvt="true" anchor parameter will cause an ".xml" extension in the HREF
     to be automatically converted to ".html" when the html conversion is performed -->
<xsl:template match="a" mode="html">
<xsl:element name="{name()}">
<xsl:for-each select="@*">
<xsl:choose>
<xsl:when test="(name())='extcvt'">
</xsl:when>
<xsl:when test="name()='href' and ../@extcvt='true' and '.xml'=substring(.,string-length(.)-3) and $extcvt='true'">
<xsl:attribute name="{name()}"><xsl:value-of select="substring(.,1,string-length(.)-4)"/>.html</xsl:attribute>
</xsl:when>
  <xsl:when test="contains(.,'$$$resdir')">
    <xsl:attribute name="{name()}">
    <xsl:value-of select="substring-before(.,'$$$resdir')"/><xsl:value-of select="$resdir"/><xsl:value-of select="substring-after(.,'$$$resdir')"/>
    </xsl:attribute>
  </xsl:when>  
<xsl:otherwise>
<xsl:attribute name="{name()}"><xsl:value-of select="."/></xsl:attribute>
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>

<xsl:apply-templates mode="html"/>
</xsl:element>
</xsl:template>

<!-- replacement for the broken &nbsp; -->
<xsl:template match="nbsp" mode="html">
<xsl:text disable-output-escaping="yes">&amp;nbsp;</xsl:text>
</xsl:template>

<!-- replacement for the broken &emsp; -->
<xsl:template match="emsp" mode="html">
<!-- IE6 doesn't support &emsp; ... use this <span> as an alternative -->
<!-- <xsl:text disable-output-escaping="yes">&amp;emsp;</xsl:text> -->
<span style="margin-left: 1em"> </span>
</xsl:template>

<!-- increment <h?> tags by 1 -->
<xsl:template match="h1|h2|h3|h4|h5" mode="html">
<xsl:element name="h{number(substring-after(name(),'h'))+1}">
<xsl:for-each select="@*"><xsl:attribute name="{name()}"><xsl:value-of select="."/></xsl:attribute></xsl:for-each>
<xsl:apply-templates mode="html"/>
</xsl:element>
</xsl:template>

<!-- filter out META elements -->
<xsl:template match="meta" mode="html">
</xsl:template>

<!-- filter out LINK elements -->
<xsl:template match="link" mode="html">
</xsl:template>

<!-- filter out STYLE elements -->
<xsl:template match="style" mode="html">
</xsl:template>
 

<!-- fallthrough for unadjusted elements -->
<xsl:template match="*" mode="html">
<xsl:element name="{name()}">
<xsl:for-each select="@*">
<xsl:choose>
  <xsl:when test="contains(.,'$$$resdir')">
    <xsl:attribute name="{name()}">
    <xsl:value-of select="substring-before(.,'$$$resdir')"/><xsl:value-of select="$resdir"/><xsl:value-of select="substring-after(.,'$$$resdir')"/>
    </xsl:attribute>
  </xsl:when>  
  <xsl:otherwise>
    <xsl:attribute name="{name()}">
    <xsl:value-of select="."/>
    </xsl:attribute>
  </xsl:otherwise>
</xsl:choose>
</xsl:for-each>

<xsl:apply-templates mode="html"/>
</xsl:element>
</xsl:template>


<!-- End transcription of body element -->



</xsl:stylesheet>
